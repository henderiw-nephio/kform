// Code generated by "mdtogo"; DO NOT EDIT.
package pkgdocs

var PkgShort = `Handle the lifecycle of a package`
var PkgLong = `
The ` + "`" + `pkg` + "`" + ` command group contains subcommands for managing module/provider packages
`

var BuildShort = `Build a provider/module package in OCI format.`
var BuildLong = `
  kform pkg build DIR [flags]

Args:

  DIR:
    build fails if DIR does not already exist.

Flags:

`
var BuildExamples = `

  # Creates a new package in OCI format for module-hello-world.
  $ kform pkg build ./module-hello-world
`

var InitShort = `Initialize an empty provider/module package.`
var InitLong = `
  kform pkg init PACKAGE-TYPE DIR [flags]

Args:

  PACKAGE-TYPE:
    a package type can either be a provider or module
  DIR:
    init fails if DIR does not already exist.

Flags:

  --description
    Short description of the package. (default "sample description")
`
var InitExamples = `

  # Creates a new module package in the module-hello-world directory.
  $ mkdir module-hello-world; kform pkg init module module-hello-world \\
      --description "my hello-world module implementation"

  # Creates a new provider package in the provider-hello-world directory.
  $ mkdir provider-hello-world; kform pkg init provider provider-hello-world \\
      --description "my hello-world provider implementation"
`

var PullShort = `Pull a provider/module package in OCI format.`
var PullLong = `
  kform pkg pull REF DIR [flags]

Args:

  DIR:
    The directory of the package. Pull fails if DIR does not already exist.
  REF:
    The oci registry reference

Flags:

`
var PullExamples = `

  # Pulls a provider OCI package to the current directory
  $ kform pkg pull ghcr.io/kformdev/provider-resourcebackend/provider-resourcebackend:v0.0.1 .
`

var PushShort = `Push a provider/module package in OCI format.`
var PushLong = `
  kform pkg push REF DIR [flags]

Args:

  DIR:
    The directory of the package. Push fails if DIR does not already exist.
  REF:
    The oci registry reference

Flags:

`
var PushExamples = `

  # Pushes a OCI package from the directory ./provider-resourcebackend to ghcr.io/kformdev/provider-resourcebackend/provider-resourcebackend:v0.0.1 with 
  # - registry: ghcr.io 
  # - organization/owner: kformdev
  # - tag: v0.0.1
  $ kform pkg push ghcr.io/kformdev/provider-resourcebackend/provider-resourcebackend:v0.0.1 ./provider-resourcebackend
`

var TreeShort = `Display resources, files and packages in a tree structure.`
var TreeLong = `
  kform pkg tree [DIR] [flags]

Args:

  DIR:
    tree uses the current directory if no DIR is supplied

Flags:

  --description
    Short description of the package. (default "sample description")
`
var TreeExamples = `

  # Creates a new module package in the module-hello-world directory.
  $ mkdir module-hello-world; kform pkg init module module-hello-world \\
      --description "my hello-world module implementation"

  # Creates a new provider package in the provider-hello-world directory.
  $ mkdir provider-hello-world; kform pkg init provider provider-hello-world \\
      --description "my hello-world provider implementation"
`
